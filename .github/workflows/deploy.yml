name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]

env:
  REGION: us-central1
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
e
jobvs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v3

      # Authenticate with Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false

      # Clean Terraform local state & init
      - name: Terraform Init
        run: |
          cd infrastructure
          rm -rf .terraform .terraform.lock.hcl backend.tf
          terraform init

      # Ensure GCS bucket for Terraform remote state exists
      - name: Ensure State Bucket Exists
        run: |
          STATE_BUCKET="${PROJECT_ID}-tfstate-insight_agent"
          if ! gsutil ls -b gs://$STATE_BUCKET >/dev/null 2>&1; then
            echo "Creating state bucket: $STATE_BUCKET"
            gsutil mb -p $PROJECT_ID -l $REGION -b on gs://$STATE_BUCKET
          else
            echo "State bucket already exists."
          fi

      # Import state bucket into Terraform state & enable APIs
      - name: Bootstrap Remote State
        run: |
          cd infrastructure
          echo "$GOOGLE_CREDENTIALS" > "$HOME/key.json"

          if ! terraform state list | grep -q google_storage_bucket.tf_state; then
            terraform import \
              -var="credentials_file=$HOME/key.json" \
              -var="project_id=$PROJECT_ID" \
              google_storage_bucket.tf_state "${PROJECT_ID}-tfstate-insight_agent"
          fi

          terraform apply -auto-approve \
            -var="project_id=$PROJECT_ID" \
            -var="credentials_file=$HOME/key.json" \
            -target=google_storage_bucket.tf_state \
            -target=google_project_service.required_apis

      # Switch to remote backend
      - name: Configure Remote Backend
        run: |
          cd infrastructure
          STATE_BUCKET="${PROJECT_ID}-tfstate-insight_agent"
          cat > backend.tf <<EOF
          terraform {
            backend "gcs" {
              bucket = "$STATE_BUCKET"
              prefix = "terraform/state"
            }
          }
          EOF
          rm -rf .terraform .terraform.lock.hcl
          yes | terraform init -migrate-state

      # Authenticate Docker for Artifact Registry
      - name: Authenticate Docker
        run: gcloud auth configure-docker $REGION-docker.pkg.dev --quiet

      # Build & Push Docker image
      - name: Build and Push Docker Image
        run: |
          cd app
          docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/insight-agent/insight-agent:$GITHUB_SHA .
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/insight-agent/insight-agent:$GITHUB_SHA

      - name: Deploy Infrastructure
        run: |
          cd infrastructure

          # 1. Write credentials locally
          echo "$GOOGLE_CREDENTIALS" > "$HOME/key.json"

          # 2. Import existing resources if not imported yet (ignore errors)
          terraform import -var="project_id=$PROJECT_ID" -var="credentials_file=$HOME/key.json" google_storage_bucket.tf_state "${PROJECT_ID}-tfstate-insight_agent" || true
          terraform import -var="project_id=$PROJECT_ID" -var="credentials_file=$HOME/key.json" google_artifact_registry_repository.insight_agent "projects/${PROJECT_ID}/locations/us-central1/repositories/insight-agent" || true
          terraform import -var="project_id=$PROJECT_ID" -var="credentials_file=$HOME/key.json" google_service_account.insight_agent "projects/${PROJECT_ID}/serviceAccounts/insight-agent-sa@${PROJECT_ID}.iam.gserviceaccount.com" || true

          # 3. Run full plan/apply to sync state fully
          terraform plan -var="project_id=$PROJECT_ID" -var="credentials_file=$HOME/key.json"

          terraform apply -auto-approve -var="image_tag=$GITHUB_SHA" -var="project_id=$PROJECT_ID" -var="credentials_file=$HOME/key.json"


            
      # Verify deployment
      - name: Verify Deployment
        run: |
          SERVICE_URL=$(cd infrastructure && terraform output -raw cloud_run_url)
          curl -s $SERVICE_URL/analyze -H "Content-Type: application/json" \
            -d '{"text":"Testing deployment"}' | jq .
