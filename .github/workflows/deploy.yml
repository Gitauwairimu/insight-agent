name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]

env:
  REGION: us-central1
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false

      - name: Clean Terraform and Init
        run: |
          cd infrastructure
          rm -rf .terraform .terraform.lock.hcl backend.tf
          terraform init

      # --- Phase 1: Create GCS Bucket for Remote State ---
      - name: Bootstrap Remote State
        run: |
          cd infrastructure
          
          terraform import \
            -var="project_id=$PROJECT_ID" \
            google_storage_bucket.tf_state "${PROJECT_ID}-tfstate-insight_agent"

          terraform apply -auto-approve \
            -target=google_storage_bucket.tf_state \
            -target=random_id.bucket_suffix \
            -target=google_project_service.required_apis \
            -var="project_id=$PROJECT_ID"

      # --- Phase 2: Create backend.tf and Reinit ---
      - name: Reconfigure to Use Remote Backend
        run: |
          cd infrastructure

          # Ensure the bucket exists first (this applies only if you did not already apply it)
          terraform apply -auto-approve -target=google_storage_bucket.tf_state -var="project_id=$PROJECT_ID"

          # Only now extract the state bucket output
          STATE_BUCKET=$(terraform output -raw state_bucket || echo "")

          if [ -z "$STATE_BUCKET" ]; then
            echo "Error: state_bucket output is empty. Check if terraform output is defined."
            exit 1
          fi

          # Write backend config with valid value
          cat > backend.tf <<EOF
          terraform {
            backend "gcs" {
              bucket = "$STATE_BUCKET"
              prefix = "terraform/state"
            }
          }
          EOF

          # Re-init without conflicting flags
          rm -rf .terraform .terraform.lock.hcl
          yes | terraform init -migrate-state


      # --- Phase 3: Deploy Infrastructure ---
      - name: Deploy Full Infrastructure
        run: |
          cd infrastructure

          terraform import \
            -var="project_id=$PROJECT_ID" \
            google_storage_bucket.tf_state "${PROJECT_ID}-tfstate-insight_agent"

          # Import the existing Artifact Registry repository
          terraform import \
            -var="project_id=$PROJECT_ID" \
            google_artifact_registry_repository.insight_agent \
            projects/$PROJECT_ID/locations/$REGION/repositories/insight-agent

          # Import the existing service account
          terraform import \
            -var="project_id=$PROJECT_ID" \
            google_service_account.insight_agent \
            projects/$PROJECT_ID/serviceAccounts/insight-agent-sa@$PROJECT_ID.iam.gserviceaccount.com


          
          terraform apply -auto-approve \
            -var="project_id=$GCP_PROJECT_ID" \
            -var="image_tag=init"

      # --- Phase 4: Build and Push Container ---
      - name: Authenticate Docker to Artifact Registry
        run: |
          gcloud auth configure-docker $REGION-docker.pkg.dev --quiet

      - name: Build and Push Docker Image
        run: |
          cd app
          docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/insight-agent/insight-agent:$GITHUB_SHA .
          docker push $REGION-docker.pkg.dev/$PROJECT_ID/insight-agent/insight-agent:$GITHUB_SHA

      # --- Phase 5: Redeploy Cloud Run with New Image ---
      - name: Deploy Cloud Run Service
        run: |
          cd infrastructure
          terraform apply -auto-approve \
            -var="project_id=$PROJECT_ID" \
            -var="image_tag=$GITHUB_SHA"

      # --- Phase 6: Verify Deployment ---
      - name: Verify Deployment
        run: |
          SERVICE_URL=$(cd infrastructure && terraform output -raw cloud_run_url)
          curl -s $SERVICE_URL/analyze -H "Content-Type: application/json" \
            -d '{"text":"Testing deployment"}' | jq .
